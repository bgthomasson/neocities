/*
@font-face {
    font-family: 'calligraffitiregular';
    src: url('Calligraffiti-webfont.eot');
    src: url('Calligraffiti-webfont.eot?#iefix') format('embedded-opentype'),
         url('Calligraffiti-webfont.woff2') format('woff2'),
         url('Calligraffiti-webfont.woff') format('woff'),
         url('Calligraffiti-webfont.ttf') format('truetype'),
         url('Calligraffiti-webfont.svg#calligraffitiregular') format('svg');
    font-weight: normal;
    font-style: normal;
}
It's giving me fits over file permissions and I don't want errors from that so commented out. 

STANDARDS! 
1. all size units should be PX or EM
2. all color should be RGB until decide if HSL or whatever is better, it's really complicated 
3. anything only used two or three times doesn't need a variable 
3b. UNLESS it's parts that need to line up like header and footer, or would be a bother to edit while testing. 

* start with variables, make light default just because it's probably more common. 
*/
:root {
    --ink: rgb(20, 20, 20); 
    --paper: rgb(250, 250, 252); 
    --bg2: rgb(240, 241, 244);
    --bg1: rgb(220, 225, 238);
    --border1: rgb(150, 186, 219);
    --border2: rgb(0, 192, 0);
    --banner: hsl(165, 100%, 72%);
    --border3: hsl(39, 100%, 70%);

    --font-sans: Cantarell, 'Noto Sans', sans-serif;
    --font-serif: 'IBM Plex Serif', Merriweather, serif;
    --font-mono: 'Oxygen Mono', 'Fira Code', Consolas, monospace; 
    --font-script: Calligraffiti, 'Happy Monkey', script;

    --percent1: 12.5%;
    --percent2: 25%; 

    --pattern-size: 32px; 

    --breakpoint-one: 66em; /* make a default width to collapse things */
}

/* and then dark mode default- even tho we're letting users pick color palette, default to one that suits each mode. */

@media (prefers-color-scheme: dark) {
    :root {
        --ink: rgb(245, 244, 244);
        --paper: rgb(24, 20, 20);
        --bg1: rgb(20, 17, 17);
        --bg2: rgb(30, 28, 28);
        --border1: rgb(38, 38, 59);
        --border2: rgb(74, 139, 74);
        --banner: hsl(166, 100%, 6%);
        --border3: hsl(39, 74%, 72%);
    }
}

/* now the different color palettes. After testing, giving each a default light/dark is most practical and pleasing way to handle it. */

:root:has(#light:checked) {
    color-scheme: light;
    --ink: rgb(20, 20, 20); 
    --paper: rgb(248, 248, 248); 
    --bg2: rgb(240, 240, 248);
    --bg1: rgb(220, 226, 228); /* oops, it looks more consistent to keep the dark parts the same in all color themes */
    --border1: rgb(155, 186, 219);
    --border2: rgb(0, 192, 0);
    --banner: hsl(165, 100%, 72%);
    --border3: hsl(39, 100%, 70%);
    /* this is just the default light scheme lol */
}

:root:has(#fire:checked) {
    color-scheme: light;
    --ink: rgb(20, 20, 20); 
    --paper: rgb(243, 243, 243); 
    --bg1: rgb(255, 61, 47);
    --bg2: rgb(253, 116, 53);
    --border1: rgb(241, 173, 44);
    --border2: rgb(119, 207, 79);
}

:root:has(#sage:checked) {
    color-scheme: light;
    --ink: rgb(20, 20, 20); 
    --paper: rgb(243, 243, 243); 
    --bg1: rgb(159, 197, 159);
    --bg2: rgb(192, 214, 194);
    --border1: rgb(191, 233, 182);
    --border2: rgb(39, 172, 94);
}

:root:has(#sky:checked) {
    color-scheme: light;
    --ink: rgb(20, 20, 20); 
    --paper: rgb(243, 243, 243); 
    --bg1: rgb(54, 131, 185);
    --bg2: rgb(153, 191, 224);
    --border1: rgb(108, 190, 253);
    --border2: rgb(24, 206, 78);
}

:root:has(#amethyst:checked) {
    color-scheme: dark; 
    --ink: rgb(245, 244, 244);
    --paper: rgb(22, 13, 22);
    --bg1: rgb(48, 22, 58);
    --bg2: rgb(80, 27, 95);
    --border1: rgb(120, 37, 156);
    --border2: rgb(74, 139, 74);
}

:root:has(#obsidian:checked) {
    color-scheme: dark; 
    --ink: rgb(245, 244, 244);
    --paper: rgb(24, 20, 20);
    --bg1: rgb(20, 17, 17);
    --bg2: rgb(30, 28, 28);
    --border1: rgb(38, 38, 59);
    --border2: rgb(74, 139, 74);
}

/* background patterns determined by conic radient percents */

:root:has(#pa:checked) {
    --percent1: 12.5%;
    --percent2: 25%; 
}

:root:has(#pb:checked) {
    --percent1: 6.25%;
    --percent2: 12.5%; 
}

:root:has(#pc:checked) {
    --percent1: 3%;
    --percent2: 6.25%; 
}

/* size */

:root:has(#size8:checked) {
    --pattern-size: 8px;
}

:root:has(#size16:checked) {
    --pattern-size: 16px;
}

:root:has(#size32:checked) {
    --pattern-size: 32px;
}

:root:has(#size48:checked) {
    --pattern-size: 48px;
}

:root:has(#size64:checked) {
    --pattern-size: 64px;
}

:root:has(#size98:checked) {
    --pattern-size: 98px;
}

/* Angles can use a variable as well but this is probably enough! */


/* ============================================================================================== */
/* universal reset, most basic styles, and the wallpapers */

html {
    color: var(--ink);
	font-size: 1rem;
    font-family: var(--font-sans);
    color-scheme: dark light;
    box-sizing: border-box;
}
*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    background-color: var(--bg1);
    font-size: 1.1em;
    line-height: 1.5; 
    margin: 0; 
}

.checkers {
    background-image: linear-gradient(90deg, var(--bg2) 50%, transparent 50%), linear-gradient(var(--bg2) 50%, transparent 50%);
    background-size: var(--pattern-size) var(--pattern-size);
}

.kaleido {
    background-image: repeating-conic-gradient(var(--bg1) 0 var(--percent1), var(--bg2) 0 var(--percent2));
    background-size: var(--pattern-size) var(--pattern-size);
}

/* the others I made playing around with tutorials but this one I yanked from css-pattern.com to edit */
.stars {
    --d: calc(var(--pattern-size)/10);  /* control the gap between stars */
    --_g: var(--bg1) 36deg, #0000 0;
    background:
      conic-gradient(from 162deg at calc(var(--pattern-size) * .5)  calc(var(--pattern-size) * .68), var(--_g)),
      conic-gradient(from 18deg  at calc(var(--pattern-size) * .19) calc(var(--pattern-size) * .59), var(--_g)),
      conic-gradient(from 306deg at calc(var(--pattern-size) * .81) calc(var(--pattern-size) * .59), var(--_g)),
      var(--bg2);
    background-position: 0 calc(var(--pattern-size) * 0.35);
    background-size: calc(var(--pattern-size) + var(--d)) calc(var(--pattern-size) + var(--d));
}

.cubes {
    background:
        repeating-conic-gradient(from 30deg,#0000 0 120deg,var(--bg2) 0 50%) calc(var(--pattern-size)/2) calc(var(--pattern-size)*tan(30deg)/2),
        repeating-conic-gradient(from 30deg,var(--bg1) 0 60deg,var(--border1) 0 120deg,var(--bg2) 0 50%);
    background-size: var(--pattern-size) calc(var(--pattern-size)*tan(30deg));
}

/* a special 404 page */
.pagenotfound {
    background-color: rgb(255, 165, 0);
    margin: 0 auto;
    width: 50em;
}

/* ================================================================================================================= */
/* and now start styling the structure */
.page-header {
    margin-bottom: 3em;
    background-color: var(--bg2);
    border: 3px solid var(--border1);
}

/* the h1 is special- */
.fancy-title {
    font-family: var(--font-script);
    text-align: center;
}

/* so the long string of radio buttons will have room on tiny screens */
.formbox {
    container-name: formbox;
    container-type: inline-size;
    display: flex;
    align-items: center;
    justify-content: space-around; /* this will center if there's only one fieldset */
}
/* this controls the radio buttons + labels; it violates the usual pattern of mobile first but oh well */
.tamedots {
    display: flex;
    align-items: stretch; 
    justify-content: center;
    flex-wrap: wrap;
    gap: 3em;

    @container formbox (width < 66em) {
        flex-direction: column;
        align-items: start;
    }
}

main {
    margin-bottom: 6em;
    container-name: main;
    container-type: inline-size;
}

/* contents of the <main> when want lots of boxes */
.grid-main {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1em;
    /* since we are applying it to the main which is the container, we just swap in "media"  */
    @media screen and (width > 66em) {
        grid-template-columns: repeat(auto-fill, minmax(544px, 1fr));
    }
}

/* just a basic centered column with no frills */
.center-inline {
    /* max-inline-size has 95% support, along with padding-inline */
    /* width: min(70em, 100%); */
    max-inline-size: 70em;
    margin-inline: auto;
}

/* to make a sidebar */
.center-cols {
    width: min(70em, 100%);
    margin-inline: auto;
    display: grid;
    gap: 1em;

    @container main (width > 66em) {
        grid-template-columns: 1fr 3fr;
    }
}

/* SO I want half image / half text, that will collapse at smaller sizes */
.capsule {
    border-top: var(--border1) 4px dotted; 

    @container main (width > 66em) {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1em;
    }
}

.page-footer {
    margin: 4em 0;
    background-color: var(--bg1);
    border: 3px solid var(--border1);
    container-name: navbox;
    container-type: inline-size;
}

.bottomnav {
    display: flex;
    align-items: center; 
    gap: 3em;
    flex-direction: column; 

    @container navbox (width > 66em) {
        flex-direction: row;
        justify-content: space-around;
    }
}


/* This is all the basic vanilla tags etc ============================================================================= */
article {
    background-color: var(--paper);
    padding: 1em;
}

aside {
    padding: 0 1em;
    border-right: var(--border1) 4px dotted; 
}

code {
    font-family: var(--font-mono);
    font-size: inherit;
}

h1, 
h2,
h3,
h4,
h5,
h6 {
    font-family: var(--font-serif);
    text-wrap: balance; 
}

ol, ul {
    padding: 0.5em;
    list-style-position: inside;
}

p {
    font-variant-numeric: oldstyle-nums;
    text-wrap: pretty;
}

img, 
picture, 
svg, 
video {
    /* display: block; */
    max-width: 100%;
    object-fit: cover;
    aspect-ratio: 1;
}
/* display:block ruins text-align:center for reasons that should be obvious */

table {
    background-color: var(--paper);
    border-collapse: collapse;
}

td,
th {
    border: 1px solid var(--border1);
    padding: 0.5em;
    text-align: left;
}

/* Fancy stuff for the link page and misc links --------------------------------------- */

/* if the entire section has bg color then you can't see the cool page bg */
.section-title {
    background-color: var(--paper);
    padding: 8px; 
}

/* this makes the numbers for the items */
.autocount {
    counter-reset: autocounter;
}

.biglink {
    counter-increment: autocounter;
}

.biglink::before {
    content: counter(autocounter);
    padding-right: .5em;
}

a:hover, 
a:focus-visible {
    text-decoration-color: var(--border2);
}

/* the nav menu links  */

.littlelink {
    border: 2px solid var(--border1);
    border-radius: 12px;
    padding: .25em;
}
.littlelink:hover {
    border-color: var(--border2);
}

/* stuff for the charmander */

.charmander {
    margin-bottom: 8em;
    text-align: center;
}
.charmander > p {
    max-width: 64ch;
    margin: auto;
}

.chara-banner {
    background-color: var(--banner);
    border: solid var(--border3) 2px;
    margin-bottom: 1em;
}

/* Form related things ----------------------------------------------------- */

fieldset {
    border: 2px solid var(--border1);
}

button,
input,
select {
    font: inherit; 
    margin: 0; 
    cursor: pointer;
    transition: all 0.1s;
}

input[type="radio"] {
    appearance: none;
    color: currentColor;
    width: 1.5em;
    height: 1.5em;
    border: 2px solid currentColor;
    border-radius: 50%;
    display: grid;
    place-content: center;
}

input[type="radio"]:checked,
input[type="radio"]:hover {
    color: var(--border2);
}

input[type="radio"]::before {
    content: "";
    width: .5em;
    height: .5em;
    border-radius: 50%;
    transform: scale(0);
    transition: 120ms transform ease-in-out;
    box-shadow: inset 1em 1em var(--border2);
}

input[type="radio"]:checked::before {
    transform: scale(1);
}

/* oekaki!!! just keep it all together. tho now IDK if I'll ever add this haha. */

.paint-main {
    background-color: rgb(216, 216, 216);
    display: flex;
    align-items: center; 
    gap: 24px;
    flex-direction: column; 
}

canvas {
    background-color: rgb(255, 255, 255);
    cursor: crosshair;
}

.paint-tools {
    background-color: var(--paper);
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 8px;
    padding: 9px;
}

.paint-tools > button {
    background-color: var(--border2);
    padding: 10px;
    border: none;
    border-radius: 4px;
    font-weight: 700;
}

.paint-tools > button:active {
    transform: translateY(6px);
}

.paint-notes {
    background-color: var(--paper);
    color: var(--ink);
}


